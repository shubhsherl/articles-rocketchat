"""Model for Article"""
type Article {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: String!
  views: Long!
  state: ENUM_ARTICLE_STATE!
  tags: String
  cover_image: UploadFile
  relations(sort: String, limit: Int, start: Int, where: JSON): [Relation]
}

type ArticleAggregator {
  count: Int
  totalCount: Int
}

type ArticleConnection {
  values: [Article]
  groupBy: ArticleGroupBy
  aggregate: ArticleAggregator
}

type ArticleConnection_id {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionContent {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionCover_image {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionCreatedAt {
  key: DateTime
  connection: ArticleConnection
}

type ArticleConnectionId {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionState {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionTags {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionTitle {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionUpdatedAt {
  key: DateTime
  connection: ArticleConnection
}

type ArticleConnectionViews {
  key: ID
  connection: ArticleConnection
}

type ArticleGroupBy {
  _id: [ArticleConnection_id]
  id: [ArticleConnectionId]
  createdAt: [ArticleConnectionCreatedAt]
  updatedAt: [ArticleConnectionUpdatedAt]
  title: [ArticleConnectionTitle]
  content: [ArticleConnectionContent]
  views: [ArticleConnectionViews]
  state: [ArticleConnectionState]
  tags: [ArticleConnectionTags]
  cover_image: [ArticleConnectionCover_image]
}

input ArticleInput {
  title: String!
  content: String!
  views: Long!
  state: ENUM_ARTICLE_STATE!
  tags: String
  relations: [ID]
  cover_image: ID
}

input createArticleInput {
  data: ArticleInput
}

type createArticlePayload {
  article: Article
}

input createRelationInput {
  data: RelationInput
}

type createRelationPayload {
  relation: Relation
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteArticleInput {
  where: InputID
}

type deleteArticlePayload {
  article: Article
}

input deleteRelationInput {
  where: InputID
}

type deleteRelationPayload {
  relation: Relation
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editArticleInput {
  title: String
  content: String
  views: Long
  state: ENUM_ARTICLE_STATE
  tags: String
  relations: [ID]
  cover_image: ID
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editRelationInput {
  article: ID
  role: ENUM_RELATION_ROLE
  user: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  rc_id: String
  relations: [ID]
  avatar: String
}

enum ENUM_ARTICLE_STATE {
  draft
  published
  archived
}

enum ENUM_RELATION_ROLE {
  owner
  editor
  author
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Article | createArticlePayload | updateArticlePayload | deleteArticlePayload | ArticleConnection | ArticleAggregator | ArticleGroupBy | ArticleConnection_id | ArticleConnectionId | ArticleConnectionCreatedAt | ArticleConnectionUpdatedAt | ArticleConnectionTitle | ArticleConnectionContent | ArticleConnectionViews | ArticleConnectionState | ArticleConnectionTags | ArticleConnectionCover_image | Relation | createRelationPayload | updateRelationPayload | deleteRelationPayload | RelationConnection | RelationAggregator | RelationGroupBy | RelationConnection_id | RelationConnectionId | RelationConnectionCreatedAt | RelationConnectionUpdatedAt | RelationConnectionArticle | RelationConnectionRole | RelationConnectionUser | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionId | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionRc_id | UsersPermissionsUserConnectionAvatar

type Mutation {
  createArticle(input: createArticleInput): createArticlePayload
  updateArticle(input: updateArticleInput): updateArticlePayload
  deleteArticle(input: deleteArticleInput): deleteArticlePayload
  createRelation(input: createRelationInput): createRelationPayload
  updateRelation(input: updateRelationInput): updateRelationPayload
  deleteRelation(input: deleteRelationInput): deleteRelationPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  article(id: ID!): Article
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
  articlesConnection(sort: String, limit: Int, start: Int, where: JSON): ArticleConnection
  relation(id: ID!): Relation
  relations(sort: String, limit: Int, start: Int, where: JSON): [Relation]
  relationsConnection(sort: String, limit: Int, start: Int, where: JSON): RelationConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

"""Relation between user and article"""
type Relation {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  article: Article
  role: ENUM_RELATION_ROLE!
  user: UsersPermissionsUser
}

type RelationAggregator {
  count: Int
  totalCount: Int
}

type RelationConnection {
  values: [Relation]
  groupBy: RelationGroupBy
  aggregate: RelationAggregator
}

type RelationConnection_id {
  key: ID
  connection: RelationConnection
}

type RelationConnectionArticle {
  key: ID
  connection: RelationConnection
}

type RelationConnectionCreatedAt {
  key: DateTime
  connection: RelationConnection
}

type RelationConnectionId {
  key: ID
  connection: RelationConnection
}

type RelationConnectionRole {
  key: String
  connection: RelationConnection
}

type RelationConnectionUpdatedAt {
  key: DateTime
  connection: RelationConnection
}

type RelationConnectionUser {
  key: ID
  connection: RelationConnection
}

type RelationGroupBy {
  _id: [RelationConnection_id]
  id: [RelationConnectionId]
  createdAt: [RelationConnectionCreatedAt]
  updatedAt: [RelationConnectionUpdatedAt]
  article: [RelationConnectionArticle]
  role: [RelationConnectionRole]
  user: [RelationConnectionUser]
}

input RelationInput {
  article: ID
  role: ENUM_RELATION_ROLE!
  user: ID
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateArticleInput {
  where: InputID
  data: editArticleInput
}

type updateArticlePayload {
  article: Article
}

input updateRelationInput {
  where: InputID
  data: editRelationInput
}

type updateRelationPayload {
  relation: Relation
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  id: [UploadFileConnectionId]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  rc_id: String!
  relations: [ID]
  avatar: String
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  rc_id: String!
  avatar: String
  relations(sort: String, limit: Int, start: Int, where: JSON): [Relation]
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionAvatar {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRc_id {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  id: [UsersPermissionsUserConnectionId]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  rc_id: [UsersPermissionsUserConnectionRc_id]
  avatar: [UsersPermissionsUserConnectionAvatar]
}
